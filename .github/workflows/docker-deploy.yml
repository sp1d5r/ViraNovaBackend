name: Build and Push Docker image

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Check out the repo
      uses: actions/checkout@v2

    - name: Log in to Digital Ocean Container Registry
      uses: docker/login-action@v1
      with:
        registry: registry.digitalocean.com
        username: _  # Digital Ocean CR uses a static username '_'
        password: ${{ secrets.DO_ACCESS_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: registry.digitalocean.com/viranova-container/viranovabackend:latest
        build-args: |
          SERVICE_ACCOUNT_ENCODED=${{ secrets.SERVICE_ACCOUNT_ENCODED }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}
          POSTGRES_SSLMODE=${{ secrets.POSTGRES_SSLMODE }}
          QDRANT_LOCATION=${{ secrets.QDRANT_LOCATION }}
          LANGCHAIN_TRACING_V2=${{ secrets.LANGCHAIN_TRACING_V2}}
          LANGCHAIN_API_KEY=${{ secrets.LANGCHAIN_API_KEY}}
          LANGCHAIN_PROJECT=${{ secrets.LANGCHAIN_PROJECT}}
          SECRET_KEY=${{ secrets.SECRET_KEY }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.20.0'

    - name: Set up DigitalOcean CLI
      run: |
        curl -sL https://github.com/digitalocean/doctl/releases/download/v1.64.0/doctl-1.64.0-linux-amd64.tar.gz | tar -xzv
        sudo mv doctl /usr/local/bin

    - name: Authenticate with DigitalOcean
      run: doctl auth init -t ${{ secrets.DO_ACCESS_TOKEN }}

    - name: Set Kubernetes context
      run: doctl kubernetes cluster kubeconfig save ${{ secrets.DO_CLUSTER_NAME }}

#    - name: Create Kubernetes secrets
#      run: |
#        kubectl create secret generic flask-app-secrets -n viranova \
#          --from-literal=SERVICE_ACCOUNT_ENCODED=${{ secrets.SERVICE_ACCOUNT_ENCODED }} \
#          --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
#          --from-literal=POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
#          --from-literal=LANGCHAIN_API_KEY=${{ secrets.LANGCHAIN_API_KEY }} \
#          --from-literal=FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }} \
#          --from-literal=POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
#          --from-literal=POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
#          --from-literal=POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} \
#          --from-literal=POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }} \
#          --from-literal=POSTGRES_SSLMODE=${{ secrets.POSTGRES_SSLMODE }} \
#          --from-literal=QDRANT_LOCATION=${{ secrets.QDRANT_LOCATION }} \
#          --from-literal=LANGCHAIN_TRACING_V2=${{ secrets.LANGCHAIN_TRACING_V2 }} \
#          --from-literal=LANGCHAIN_PROJECT=${{ secrets.LANGCHAIN_PROJECT }}

    - name: Apply Kubernetes configurations
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml

    - name: Deploy to Kubernetes
      run: |
        kubectl set image deployment/viranova -n viranova viranova=registry.digitalocean.com/viranova-container/viranovabackend:latest